rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /dynamicData/gameRoles {
      allow read: if true;
      allow write: if false;
    }

    match /dynamicData/devOpsMaturities {
      allow read: if true;
      allow write: if false;
    }

    match /cards/{cardId} {
      allow read: if isAuthenticated();
    }

    match /decks/{deckId} {
      allow read: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if userId == authUserUid();
      allow create: if userId == authUserUid() && isValidUserCreate();
    }

    match /games/{gameId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isValidGameCreate();
    }

    function isValidGameCreate() {
      let facilitatorId = authUserUid();
      let gameData = getDataToWrite();
      let scenarioCard = getDocumentData(/cards/$(gameData.scenarioCardId));

      return gameData.keys().hasOnly(['scenarioTitle', 'scenarioContent',
        'scenarioCardId', 'deckId', 'facilitator', 'createdAt', 'boardDimensions', 'cards', 'rtdbInstance', 'review']) &&
      (
        (gameData.scenarioCardId != null && exists(/databases/$(database)/documents/cards/$(gameData.scenarioCardId)) &&
          scenarioCard.title == gameData.scenarioTitle &&
          scenarioCard.content == gameData.scenarioContent)
        ||
        (gameData.scenarioCardId == null &&
        isStringShorterThan(gameData.scenarioTitle, 100) &&
        isStringShorterThan(gameData.scenarioContent, 3000))
      ) &&
      existsDocumentData(/decks/$(gameData.deckId)) &&
      isMapBigAs(gameData.facilitator, 1) &&
      isServerCreationTime(gameData.createdAt) &&
      facilitatorId == gameData.facilitator.id &&
      gameData.cards == null &&
      gameData.rtdbInstance == null &&
      isMapBigAs(gameData.boardDimensions, 2) &&
      gameData.review == false &&
      gameData.boardDimensions.x == 3840 &&
      gameData.boardDimensions.y == 2160;
    }

    function isValidUserCreate() {
      let userData = getDataToWrite();
      let allowedRoles = getDocumentData(/dynamicData/gameRoles).roles;
      let allowedMaturities = getDocumentData(/dynamicData/devOpsMaturities).maturities;

      return userData.keys().hasOnly(['role', 'devOpsMaturity', 'email', 'firstName', 'lastName', 'createdAt'])
        && userData.email == request.auth.token.email
        && isStringShorterThan(userData.firstName, 100)
        && isStringShorterThan(userData.lastName, 100)
        && allowedRoles.hasAny([userData.role])
        && allowedMaturities.hasAny([userData.devOpsMaturity])
        && isServerCreationTime(userData.createdAt);
    }

    function isMapBigAs(val, size) {
      return val is map && val.size() == size;
    }

    function isStringShorterThan(val, len) {
      return val is string && val.size() < len;
    }

    function isServerCreationTime(val) {
      return val == request.time;
    }

    function getDocumentData(documentPath) {
      return get(/databases/$(database)/documents/$(documentPath)).data;
    }

    function existsDocumentData(documentPath) {
      return exists(/databases/$(database)/documents/$(documentPath));
    }

    function getDataToWrite() {
      return request.resource.data;
    }

    function authUserUid() {
      return request.auth.uid;
    }

    function isAuthenticated() {
      return request.auth != null && request.auth.token.email_verified;
    }

  }
}
